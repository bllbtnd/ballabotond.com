---
// Projects page for Balla Botond's Astro site
import Layout from '../../layouts/Layout.astro';
import Footer from '../../components/Footer.astro';
import { useTranslations, useTranslatedPath, languages } from '../../i18n/utils';

export function getStaticPaths() {
  return Object.keys(languages).filter(lang => lang !== 'en').map(lang => ({
    params: { lang }
  }));
}

const { lang } = Astro.params;
const typedLang = lang as keyof typeof languages;
const t = useTranslations(typedLang);
const translatePath = useTranslatedPath(typedLang);
const siteOrigin = Astro.site ?? 'https://ballabotond.com';
const pageUrl = new URL(Astro.url.pathname, siteOrigin).toString();

const getAbsoluteUrl = (path: string) => new URL(path, siteOrigin).toString();
const resolveProjectUrl = (url: string, id: string) => {
  if (!url) return `${pageUrl}#${id}`;
  if (url.startsWith('http://') || url.startsWith('https://')) return url;
  if (url.startsWith('/')) return getAbsoluteUrl(url);
  return `https://${url}`;
};

const projects = [
  {
    id: 'vortex-chat',
    category: t('projects.category.mobile'),
    title: t('projects.vortex.title'),
    description: t('projects.vortex.description'),
    buttonText: t('projects.vortex.button'),
    url: 'https://vortex.ballabotond.com/',
    icon: 'fas fa-comments',
    status: 'active'
  },
  {
    id: 'kki-calculator',
    category: t('projects.category.webapps'),
    title: t('projects.kki.title'),
    description: t('projects.kki.description'),
    buttonText: t('projects.kki.button'),
    url: 'https://kki.ballabotond.com',
    icon: 'fas fa-brain',
    status: 'active'
  },
  {
    id: 'trackit-app',
    category: t('projects.category.health'),
    title: t('projects.trackit.title'),
    description: t('projects.trackit.description'),
    buttonText: t('projects.trackit.button'),
    url: '',
    icon: 'fas fa-weight',
    status: 'coming-soon'
  },
  {
    id: 'minecraft-server',
    category: t('projects.category.gaming'),
    title: t('projects.minecraft.title'),
    description: t('projects.minecraft.description'),
    buttonText: t('projects.minecraft.button'),
    url: 'mcserver.ballabotond.com',
    icon: 'fas fa-cube',
    status: 'past',
    copyToClipboard: true
  }
];

const projectSchemaDetails: Record<string, Record<string, unknown>> = {
  'vortex-chat': {
    '@type': 'SoftwareApplication',
    applicationCategory: 'CommunicationApplication',
    operatingSystem: ['Android', 'iOS'],
    downloadUrl: 'https://vortex.ballabotond.com/',
    offers: {
      '@type': 'Offer',
      price: '0',
      priceCurrency: 'USD',
      availability: 'https://schema.org/InStock'
    }
  },
  'kki-calculator': {
    '@type': 'WebApplication',
    applicationCategory: 'HealthApplication',
    operatingSystem: 'Web',
    offers: {
      '@type': 'Offer',
      price: '0',
      priceCurrency: 'USD',
      availability: 'https://schema.org/InStock'
    }
  },
  'trackit-app': {
    '@type': 'SoftwareApplication',
    applicationCategory: 'HealthApplication',
    operatingSystem: ['Android', 'iOS'],
    offers: {
      '@type': 'Offer',
      price: '0',
      priceCurrency: 'USD',
      availability: 'https://schema.org/PreOrder'
    }
  },
  'minecraft-server': {
    '@type': 'VideoGame',
    applicationCategory: 'Game',
    gamePlatform: ['PC', 'Raspberry Pi'],
    gameServer: {
      '@type': 'GameServer',
      serverStatus: 'https://schema.org/OfflineTemporarily',
      playersOnline: 0
    }
  }
};

const breadcrumbSchema = {
  '@context': 'https://schema.org',
  '@type': 'BreadcrumbList',
  '@id': `${pageUrl}#breadcrumb`,
  itemListElement: [
    {
      '@type': 'ListItem',
      position: 1,
      name: t('nav.home'),
      item: getAbsoluteUrl(translatePath('/'))
    },
    {
      '@type': 'ListItem',
      position: 2,
      name: t('projects.subtitle'),
      item: pageUrl
    }
  ]
};

const itemListSchema = {
  '@context': 'https://schema.org',
  '@type': 'ItemList',
  '@id': `${pageUrl}#itemlist`,
  name: `${t('projects.subtitle')} - ${t('common.name')}`,
  url: pageUrl,
  inLanguage: typedLang,
  itemListOrder: 'https://schema.org/ItemListOrderAscending',
  numberOfItems: projects.length,
  itemListElement: projects.map((project, index) => ({
    '@type': 'ListItem',
    position: index + 1,
    name: project.title,
    description: project.description,
    url: resolveProjectUrl(project.url, project.id)
  }))
};

const projectSchemas = projects.map((project) => {
  const details = projectSchemaDetails[project.id] || { '@type': 'CreativeWork' };
  const { ['@type']: detailType = 'CreativeWork', ...rest } = details;
  const absoluteUrl = resolveProjectUrl(project.url, project.id);
  return {
    '@context': 'https://schema.org',
    '@type': detailType,
    '@id': `${absoluteUrl}#schema`,
    name: project.title,
    description: project.description,
    url: absoluteUrl,
    inLanguage: typedLang,
    identifier: project.id,
    image: getAbsoluteUrl('/assets/images/projects-og.png'),
    author: {
      '@id': `${siteOrigin}#person`
    },
    ...rest
  };
});

const structuredData = [breadcrumbSchema, itemListSchema, ...projectSchemas];

const getStatusBadge = (status: string) => {
  switch (status) {
    case 'active':
      return { text: t('projects.status.live'), class: 'bg-green-500', color: '#28a745' };
    case 'coming-soon':
      return { text: t('projects.status.coming'), class: 'bg-yellow-500', color: '#ffc107' };
    case 'maintenance':
      return { text: t('projects.status.maintenance'), class: 'bg-red-500', color: '#dc3545' };
    case 'past':
      return { text: t('projects.status.past'), class: 'bg-gray-500', color: '#6c757d' };
    default:
      return { text: 'Unknown', class: 'bg-gray-500', color: '#6c757d' };
  }
};
---

<Layout
  title={t('projects.title')}
  description={t('projects.description')}
  keywords={t('home.keywords')}
  ogImage="/assets/images/projects-og.png"
>
  <script slot="head" type="application/ld+json" is:inline>
    {JSON.stringify(structuredData)}
  </script>
  <!-- Navigation -->
  <nav class="fixed top-6 right-6 z-50">
    <a href={translatePath('/')} 
       class="group flex items-center gap-3 px-6 py-3 rounded-full bg-gray-900 bg-opacity-80 backdrop-blur-sm border border-luxury-gold hover:bg-luxury-gold hover:border-luxury-gold text-luxury-gold hover:text-gray-900 transition-all duration-300 transform hover:scale-105 shadow-xl hover:shadow-2xl"
       aria-label="Go to Home">
      <i class="fas fa-home text-lg group-hover:scale-110 transition-transform duration-300"></i>
      <span class="font-montserrat font-medium text-sm uppercase tracking-wider">{t('nav.home')}</span>
    </a>
  </nav>

  <!-- Main container -->
  <div class="relative min-h-screen flex flex-col">
    <!-- Content container -->
    <div class="relative z-10 flex-1 py-20">
      <div class="max-w-6xl mx-auto px-6">
      
      <!-- Header section -->
      <header class="text-center mb-16">
        <!-- Brand Monogram -->
        <div class="flex items-center justify-center mb-8 animate-fade-in">
          <span class="font-playfair text-4xl md:text-6xl font-light text-luxury-gold drop-shadow-2xl">B</span>
          <div class="mx-4 flex flex-col items-center">
            <div class="w-px h-8 bg-luxury-gold opacity-60"></div>
          </div>
          <span class="font-playfair text-4xl md:text-6xl font-light text-luxury-gold drop-shadow-2xl">B</span>
        </div>
        
        <p class="font-montserrat text-sm uppercase tracking-widest text-luxury-gold mb-6 animate-fade-in" style="animation-delay: 0.3s;">
          {t('projects.tagline')}
        </p>
        
        <h1 class="font-playfair text-4xl md:text-6xl font-medium mb-4 text-white leading-tight animate-fade-in" style="animation-delay: 0.6s;">
          {t('projects.subtitle')}
        </h1>
        
        <p class="font-montserrat text-lg md:text-xl text-luxury-gray font-light max-w-2xl mx-auto leading-relaxed animate-fade-in" style="animation-delay: 0.9s;">
          {t('projects.description')}
        </p>
      </header>

      <!-- Projects grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {projects.map((project, index) => {
          const statusBadge = getStatusBadge(project.status);
          const isPast = project.status === 'past';
          const isComingSoon = project.status === 'coming-soon';
          const isButtonDisabled = isPast || (isComingSoon && !project.url);
          
          return (
            <div class={`bg-gray-800 bg-opacity-50 backdrop-blur-sm rounded-2xl p-6 border border-gray-700 hover:border-luxury-gold transition-all duration-300 transform hover:scale-105 hover:shadow-2xl animate-fade-in ${isPast ? 'opacity-50' : ''}`}
                 style={`animation-delay: ${1.2 + index * 0.2}s;`}>
              
              <!-- Project icon and status -->
              <div class="flex items-center justify-between mb-4">
                <div class="w-12 h-12 rounded-full bg-luxury-gold bg-opacity-20 flex items-center justify-center">
                  <i class={`${project.icon} text-luxury-gold text-xl`}></i>
                </div>
                <span class={`px-3 py-1 rounded-full text-xs font-montserrat font-semibold uppercase tracking-wider ${statusBadge.class}`}>
                  {statusBadge.text}
                </span>
              </div>
              
              <!-- Project category -->
              <p class="font-montserrat text-sm text-luxury-gray uppercase tracking-wider mb-2">
                {project.category}
              </p>
              
              <!-- Project title -->
              <h3 class="font-playfair text-2xl font-medium text-white mb-3">
                {project.title}
              </h3>
              
              <!-- Project description -->
              <p class="font-montserrat text-luxury-gray text-sm leading-relaxed mb-6">
                {project.description}
              </p>
              
              <!-- Project button -->
              <button 
                class={`w-full px-6 py-3 rounded-full border-2 font-montserrat font-semibold text-sm uppercase tracking-wider transition-all duration-300 ${
                  isButtonDisabled 
                    ? 'border-gray-500 text-gray-500 cursor-not-allowed' 
                    : 'border-luxury-gold text-luxury-gold hover:bg-luxury-gold hover:text-gray-900'
                }`}
                disabled={isButtonDisabled}
                onclick={isButtonDisabled ? '' : (project.copyToClipboard ? 
                  `navigator.clipboard.writeText('${project.url}'); alert('${lang === 'hu' ? 'Szerver IP másolva a vágólapra!' : lang === 'it' ? 'IP server copiato negli appunti!' : 'Server IP copied to clipboard!'}');` : 
                  `window.open('${project.url}', '_blank')`)}
              >
                {project.buttonText}
              </button>
            </div>
          );
        })}
      </div>
      </div>
    </div>
    
    <!-- Footer Component -->
    <Footer variant="full" />
  </div>
</Layout>
