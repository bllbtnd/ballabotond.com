---
import { languages } from '../i18n/ui';
import { getLangFromUrl } from '../i18n/utils';

const lang = getLangFromUrl(Astro.url);
const currentPath = Astro.url.pathname;

// Remove language prefix to get the base path
let basePath = currentPath;
// Remove the language prefix if it exists (e.g., /hu/resume -> /resume, /egy/resume -> /resume)
basePath = basePath.replace(/^\/[a-z]{2,3}(?=\/|$)/, '') || '/';

// Function to get the correct path for each language
function getLocalizedPath(locale: string) {
  if (locale === 'en') {
    return basePath;
  }
  return `/${locale}${basePath}`;
}
---

<div class="language-dropdown relative">
  <!-- Trigger button -->
  <button
    id="lang-trigger"
    class="flex items-center gap-2 px-3 py-2 text-sm font-montserrat font-medium uppercase tracking-wider text-luxury-gold hover:text-white transition-all duration-300 group"
    aria-label="Select language"
  >
    <span class="text-luxury-gold group-hover:text-white transition-colors duration-300">
      {languages[lang]}
    </span>
    <i class="fas fa-chevron-down text-xs text-luxury-gold group-hover:text-white transition-all duration-300 transform group-hover:rotate-180"></i>
  </button>

  <!-- Dropdown menu -->
  <div
    id="lang-menu"
    class="absolute top-full mt-1 bg-gray-900 bg-opacity-95 backdrop-blur-md border border-gray-700 rounded-lg shadow-xl overflow-hidden opacity-0 invisible transform translate-y-2 scale-95 transition-all duration-300 z-50 min-w-32"
  >
    {Object.entries(languages).map(([locale, name]) => (
      <a
        href={getLocalizedPath(locale)}
        class={`block px-4 py-3 text-sm font-montserrat transition-all duration-200 ${
          locale === lang
            ? 'bg-luxury-gold text-gray-900 font-semibold'
            : 'text-luxury-gray hover:bg-gray-800 hover:text-luxury-gold'
        }`}
        data-locale={locale}
      >
        <span class="uppercase tracking-wider">{name}</span>
        {locale === lang && (
          <i class="fas fa-check text-xs float-right mt-0.5"></i>
        )}
      </a>
    ))}
  </div>
</div>

<style>
.language-dropdown.active #lang-menu {
  opacity: 1;
  visibility: visible;
  transform: translateY(0) scale-100;
}

/* Mobile responsive adjustments */
@media (max-width: 768px) {
  .language-dropdown #lang-menu {
    right: -1rem;
    left: -1rem;
    min-width: auto;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const trigger = document.getElementById('lang-trigger');
  const menu = document.getElementById('lang-menu');
  const dropdown = document.querySelector('.language-dropdown');

  if (trigger && menu && dropdown) {
    let isOpen = false;

    const toggleDropdown = () => {
      isOpen = !isOpen;
      if (isOpen) {
        // Position the dropdown to stay within viewport
        positionDropdown();
        dropdown.classList.add('active');
      } else {
        dropdown.classList.remove('active');
      }
    };

    const positionDropdown = () => {
      const rect = trigger.getBoundingClientRect();
      const menuRect = menu.getBoundingClientRect();
      const viewportWidth = window.innerWidth;

      // Reset positioning
      menu.style.left = 'auto';
      menu.style.right = 'auto';

      // Check if there's enough space on the right
      if (rect.right + menuRect.width > viewportWidth) {
        // Position to the left
        menu.style.right = '0';
      } else {
        // Position to the right (default)
        menu.style.left = '0';
      }
    };

    const closeDropdown = () => {
      isOpen = false;
      dropdown.classList.remove('active');
    };

    // Toggle on button click
    trigger.addEventListener('click', (e) => {
      e.stopPropagation();
      toggleDropdown();
    });

    // Close when clicking outside
    document.addEventListener('click', (e) => {
      if (e.target && !dropdown.contains(e.target as Node)) {
        closeDropdown();
      }
    });

    // Close on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && isOpen) {
        closeDropdown();
      }
    });

    // Close when a language is selected
    menu.addEventListener('click', (e) => {
      if (e.target && (e.target as HTMLElement).closest('a')) {
        closeDropdown();
      }
    });

    // Reposition on window resize
    window.addEventListener('resize', () => {
      if (isOpen) {
        positionDropdown();
      }
    });
  }
});
</script>
