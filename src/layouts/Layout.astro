
---
// Main site layout for Balla Botond, using luxury palette and modern fonts
import LoadingScreen from '../components/LoadingScreen.astro';
import LanguageSwitcher from '../components/LanguageSwitcher.astro';
import { getLangFromUrl, useTranslations, defaultLang, languages as supportedLanguages } from '../i18n/utils';

export interface Props {
  title?: string;
  description?: string;
  keywords?: string;
  ogImage?: string;
  canonical?: string;
  noindex?: boolean;
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const { 
  title = t('home.title'),
  description = t('home.description'),
  keywords = t('home.keywords'),
  ogImage = '/assets/images/image.png',
  canonical,
  noindex = false
} = Astro.props;

// Generate canonical URL
const canonicalURL = canonical || new URL(Astro.url.pathname, Astro.site).toString();

// Enhanced meta data for better SEO
const siteTitle = "Balla Botond";
const siteDescription = "Software Developer & Computer Science Student specializing in web development, innovative solutions, and quality craftsmanship. Explore projects, resume, and connect.";
const author = "Balla Botond";
const siteUrl = "https://ballabotond.com";

// Language-specific locale mapping
const localeMap: Record<string, string> = {
  'en': 'en_US',
  'hu': 'hu_HU', 
  'it': 'it_IT',
  'zh': 'zh_CN',
  'ja': 'ja_JP',
  'egy': 'ar_EG'
};

const currentLocale = localeMap[lang] || 'en_US';
const supportedLocaleKeys = Object.keys(supportedLanguages);

const sameAsLinks = [
  'https://github.com/bllbtnd',
  'https://www.facebook.com/bllbtnd',
  'https://www.instagram.com/bllbtnd',
  'https://twitter.com/bllbtnd'
];

const stripLocaleFromPath = (pathname: string) => {
  const segments = pathname.split('/');
  const potentialLocale = segments[1];
  if (potentialLocale && supportedLocaleKeys.includes(potentialLocale)) {
    const rest = segments.slice(2).join('/');
    return rest ? `/${rest}` : '/';
  }
  return pathname || '/';
};

const defaultLocalePath = stripLocaleFromPath(Astro.url.pathname);
const hreflangMap = Object.fromEntries(Object.entries(localeMap).map(([key, value]) => [key, value.replace('_', '-')]));

const alternateLinks = supportedLocaleKeys.map((code) => {
  const localizedPath = code === defaultLang
    ? defaultLocalePath
    : `/${code}${defaultLocalePath === '/' ? '' : defaultLocalePath}`;
  const href = new URL(localizedPath, siteUrl).toString();
  return {
    code,
    href,
    hrefLang: hreflangMap[code] || code
  };
});

const defaultAlternateHref = new URL(defaultLocalePath, siteUrl).toString();
const siteLanguages = supportedLocaleKeys.map((code) => hreflangMap[code] || code);

const personSchema = {
  '@type': 'Person',
  '@id': `${siteUrl}#person`,
  name: siteTitle,
  alternateName: ['Botond Balla', 'bllbtnd'],
  description: siteDescription,
  url: siteUrl,
  image: `${siteUrl}/assets/images/image.png`,
  sameAs: sameAsLinks,
  jobTitle: 'Software Developer',
  alumniOf: {
    '@type': 'EducationalOrganization',
    name: 'University of PÃ©cs'
  },
  nationality: {
    '@type': 'Country',
    name: 'Hungary'
  },
  knowsLanguage: [
    {
      '@type': 'Language',
      name: 'Hungarian',
      alternateName: 'hu'
    },
    {
      '@type': 'Language',
      name: 'English',
      alternateName: 'en'
    }
  ],
  hasOccupation: {
    '@type': 'Occupation',
    name: 'Software Developer',
    occupationLocation: {
      '@type': 'Country',
      name: 'Hungary'
    }
  },
  worksFor: {
    '@type': 'Organization',
    name: 'LogiCloud KFT'
  }
};

const websiteSchema = {
  '@type': 'WebSite',
  '@id': `${siteUrl}#website`,
  name: siteTitle,
  url: siteUrl,
  description: siteDescription,
  inLanguage: siteLanguages,
  publisher: {
    '@id': `${siteUrl}#person`
  },
  creator: {
    '@id': `${siteUrl}#person`
  },
  sameAs: sameAsLinks
};

const baseSchema = {
  '@context': 'https://schema.org',
  '@graph': [personSchema, websiteSchema]
};
---

<!DOCTYPE html>
<html lang={lang} dir="ltr">
  <head>
    <!-- Essential meta tags -->
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    
    <!-- SEO meta tags -->
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="keywords" content={keywords} />
    <meta name="author" content={author} />
    <meta name="robots" content={noindex ? "noindex, nofollow" : "index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1"} />
    <meta name="googlebot" content="index, follow" />
    <meta name="bingbot" content="index, follow" />
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL} />
    {alternateLinks.map((alternate) => (
      <link rel="alternate" hreflang={alternate.hrefLang} href={alternate.href} />
    ))}
    <link rel="alternate" hreflang="x-default" href={defaultAlternateHref} />
    
    <!-- Language and regional targeting -->
    <meta name="language" content={lang} />
    <meta name="geo.region" content="HU" />
    <meta name="geo.country" content="Hungary" />
    <meta name="distribution" content="global" />
    <meta name="rating" content="general" />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:site_name" content={siteTitle} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(ogImage, siteUrl).toString()} />
    <meta property="og:image:alt" content={`${siteTitle} - ${description}`} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:locale" content={currentLocale} />
    
    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@bllbtnd" />
    <meta name="twitter:creator" content="@bllbtnd" />
    <meta name="twitter:url" content={canonicalURL} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={new URL(ogImage, siteUrl).toString()} />
    <meta name="twitter:image:alt" content={`${siteTitle} - ${description}`} />
    
    <!-- Additional SEO meta tags -->
    <meta name="theme-color" content="#c9a96b" />
    <meta name="msapplication-TileColor" content="#c9a96b" />
    <meta name="msapplication-config" content="/browserconfig.xml" />
    
    <!-- Favicon and app icons -->
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon.png" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="apple-touch-icon" sizes="180x180" href="/favicon.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <link rel="shortcut icon" href="/favicon.png" />
    
    <!-- Structured data graph -->
    <script type="application/ld+json" is:inline>
      {JSON.stringify(baseSchema)}
    </script>
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-3NZN7X2WL9" crossorigin="anonymous"></script>
    <script>
      (window as any).dataLayer = (window as any).dataLayer || [];
      function gtag(...args: any[]){(window as any).dataLayer.push(args);}
      gtag('js', new Date());
      gtag('config', 'G-3NZN7X2WL9');
      
      // Handle script loading errors gracefully
      window.addEventListener('error', function(e) {
        if (e.target && (e.target as any).src && (e.target as any).src.includes('googletagmanager')) {
          console.warn('Google Analytics script blocked or failed to load');
        }
      });
    </script>
    
    <!-- DNS prefetch for performance -->
    <link rel="dns-prefetch" href="//fonts.googleapis.com" />
    <link rel="dns-prefetch" href="//fonts.gstatic.com" />
    <link rel="dns-prefetch" href="//cdnjs.cloudflare.com" />
    <link rel="dns-prefetch" href="//www.googletagmanager.com" />
    
    <!-- Preconnect for critical resources -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    
    <!-- Google Fonts with display=swap for performance -->
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@300;400;500;600;700;800;900&family=Montserrat:wght@300;400;500;600;700&display=swap" rel="stylesheet" />
    
    <!-- Font Awesome with integrity check -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    
    <style>
      /* Global background */
      .site-body {
        background: linear-gradient(135deg, #0b0b0f 0%, #1a1a20 50%, #0b0b0f 100%);
        min-height: 100vh;
        position: relative;
        isolation: isolate;
        overflow-x: hidden;
      }

      .site-body::before {
        content: '';
        position: fixed;
        inset: 0;
        pointer-events: none;
        background-image:
          radial-gradient(circle at 20% 20%, rgba(201, 169, 107, 0.12) 0%, transparent 55%),
          radial-gradient(circle at 80% 80%, rgba(201, 169, 107, 0.08) 0%, transparent 55%),
          radial-gradient(circle at 50% 10%, rgba(201, 169, 107, 0.05) 0%, transparent 60%);
        z-index: -2;
      }

      .site-background {
        position: fixed;
        inset: 0;
        pointer-events: none;
        z-index: -1;
        transform: translate3d(0, 0, 0);
        will-change: transform;
      }

      .site-background__canvas {
        width: 100%;
        height: 100%;
        display: block;
        opacity: 0.7;
        filter: drop-shadow(0 0 36px rgba(201, 169, 107, 0.25));
      }

      /* Custom font utilities */
      .font-playfair { font-family: 'Playfair Display', serif; }
      .font-montserrat { font-family: 'Montserrat', sans-serif; }
      
      /* Custom animations */
      @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
      }
      
      .animate-fade-in {
        animation: fadeIn 1s ease-out forwards;
      }
      
      /* Custom luxury colors */
      .text-luxury-gold { color: #c9a96b; }
      .bg-luxury-gold { background-color: #c9a96b; }
      .text-luxury-gold-light { color: #e8c474; }
      .bg-luxury-gold-light { background-color: #e8c474; }
      .text-luxury-gray { color: #b4b4b6; }
      .text-luxury-gray-dark { color: #8e8e93; }
      .border-luxury-gold { border-color: #c9a96b; }
      .border-luxury-gray { border-color: #b4b4b6; }
      
      /* Custom hover effects */
      .hover-luxury-gold:hover { background-color: #e8c474; }
      .hover-luxury-text:hover { color: #0b0b0f; }
      
      /* Loading screen styles */
      body.loading {
        overflow: hidden;
      }
      
      /* Smooth page transitions */
      * {
        transition: opacity 0.3s ease-in-out;
      }
      
      /* Disable text selection, right-click, and drag actions - only in production */
      body.production-mode {
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        -webkit-touch-callout: none;
        -webkit-tap-highlight-color: transparent;
      }
      
      /* Disable image dragging - only in production */
      body.production-mode img {
        -webkit-user-drag: none;
        -khtml-user-drag: none;
        -moz-user-drag: none;
        -o-user-drag: none;
        user-drag: none;
        pointer-events: none;
      }
      
      /* Allow text selection only for specific elements in production */
      body.production-mode input, 
      body.production-mode textarea, 
      body.production-mode [contenteditable] {
        -webkit-user-select: text;
        -moz-user-select: text;
        -ms-user-select: text;
        user-select: text;
      }
      
      /* Disable highlighting on buttons and links in production */
      body.production-mode button, 
      body.production-mode a {
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        -webkit-tap-highlight-color: transparent;
      }
    </style>
    
    <!-- Disable right-click and keyboard shortcuts script -->
    <script>
      // Only enable protection in production
      if (import.meta.env.PROD) {
        // Add production mode class to body for CSS protection
        document.body.classList.add('production-mode');
        
        // Disable right-click context menu
        document.addEventListener('contextmenu', function(e) {
          e.preventDefault();
          return false;
        });
        
        // Disable text selection with mouse
        document.addEventListener('selectstart', function(e) {
          e.preventDefault();
          return false;
        });
        
        // Disable drag and drop
        document.addEventListener('dragstart', function(e) {
          e.preventDefault();
          return false;
        });
        
        // Disable common keyboard shortcuts
        document.addEventListener('keydown', function(e) {
          // Disable F12 (Developer Tools)
          if (e.keyCode === 123) {
            e.preventDefault();
            return false;
          }
          
          // Disable Ctrl+Shift+I (Developer Tools)
          if (e.ctrlKey && e.shiftKey && e.keyCode === 73) {
            e.preventDefault();
            return false;
          }
          
          // Disable Ctrl+Shift+J (Console)
          if (e.ctrlKey && e.shiftKey && e.keyCode === 74) {
            e.preventDefault();
            return false;
          }
          
          // Disable Ctrl+U (View Source)
          if (e.ctrlKey && e.keyCode === 85) {
            e.preventDefault();
            return false;
          }
          
          // Disable Ctrl+S (Save Page)
          if (e.ctrlKey && e.keyCode === 83) {
            e.preventDefault();
            return false;
          }
          
          // Disable Ctrl+A (Select All)
          if (e.ctrlKey && e.keyCode === 65) {
            e.preventDefault();
            return false;
          }
          
          // Disable Ctrl+P (Print)
          if (e.ctrlKey && e.keyCode === 80) {
            e.preventDefault();
            return false;
          }
          
          // Disable Ctrl+C (Copy)
          if (e.ctrlKey && e.keyCode === 67) {
            e.preventDefault();
            return false;
          }
          
          // Disable Ctrl+V (Paste)
          if (e.ctrlKey && e.keyCode === 86) {
            e.preventDefault();
            return false;
          }
          
          // Disable Ctrl+X (Cut)
          if (e.ctrlKey && e.keyCode === 88) {
            e.preventDefault();
            return false;
          }
        });
        
        // Disable image saving on mobile
        document.addEventListener('touchstart', function(e) {
          if (e.target && (e.target as HTMLElement).tagName === 'IMG') {
            e.preventDefault();
          }
        });
        
        // Additional protection against devtools
        let devtools = {
          open: false,
          orientation: null
        };
        
        const threshold = 160;
        setInterval(function() {
          if (window.outerHeight - window.innerHeight > threshold || 
              window.outerWidth - window.innerWidth > threshold) {
            if (!devtools.open) {
              devtools.open = true;
              console.clear();
              console.log('%cDeveloper tools detected!', 'color: red; font-size: 20px; font-weight: bold;');
              // Optionally redirect or take other action
              // window.location.href = '/';
            }
          } else {
            devtools.open = false;
          }
        }, 500);
        
        // Disable console
        if (typeof console !== 'undefined') {
          console.log = function() {};
          console.warn = function() {};
          console.error = function() {};
          console.info = function() {};
          console.debug = function() {};
        }
        
        // Clear console periodically
        setInterval(function() {
          console.clear();
        }, 1000);
      } else {
        // Development mode - show a subtle indicator
        console.log('%cDevelopment Mode: Protection disabled', 'color: #c9a96b; font-size: 14px; background: #1a1a20; padding: 5px; border-radius: 3px;');
      }
    </script>
    <slot name="head" />
  </head>
  <body class="site-body text-white min-h-screen loading" oncontextmenu="return false;" onselectstart="return false;" ondragstart="return false;">
    <div id="site-background" class="site-background" aria-hidden="true">
      <canvas id="constellation-canvas" class="site-background__canvas"></canvas>
    </div>

    <LoadingScreen />
    
    <!-- Language Switcher -->
    <div class="fixed top-6 left-6 z-50">
      <LanguageSwitcher currentLang={lang} />
    </div>
    
    <slot />

    <script>
      document.documentElement.style.scrollBehavior = 'smooth';

  const siteBackground = document.getElementById('site-background');
  const constellationCanvas = document.getElementById('constellation-canvas') as HTMLCanvasElement | null;
  const motionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');
  let prefersReducedMotion = motionQuery.matches;

  let parallaxCurrent = 0;
  let parallaxTarget = 0;
  let parallaxAnimationId = 0;
  let parallaxMax = Math.min(180, window.innerHeight * 0.3);
  const parallaxFactor = 0.06;
  const parallaxEase = 0.1;

  const updateParallaxBounds = () => {
    parallaxMax = Math.min(220, window.innerHeight * 0.35);
  };

  const applyParallaxTransform = () => {
    if (siteBackground) {
      siteBackground.style.transform = `translate3d(0, ${parallaxCurrent}px, 0)`;
    }
  };

  const runParallaxStep = () => {
    if (prefersReducedMotion) {
      parallaxCurrent = 0;
      applyParallaxTransform();
      parallaxAnimationId = 0;
      return;
    }

    const delta = parallaxTarget - parallaxCurrent;

    if (Math.abs(delta) < 0.1) {
      parallaxCurrent = parallaxTarget;
      applyParallaxTransform();
      parallaxAnimationId = 0;
      return;
    }

    parallaxCurrent += delta * parallaxEase;
    applyParallaxTransform();
    parallaxAnimationId = window.requestAnimationFrame(runParallaxStep);
  };

  const scheduleParallaxStep = () => {
    if (parallaxAnimationId === 0) {
      parallaxAnimationId = window.requestAnimationFrame(runParallaxStep);
    }
  };

  const updateParallaxTarget = () => {
    if (prefersReducedMotion) {
      parallaxTarget = 0;
    } else {
      const raw = window.scrollY * -parallaxFactor;
      parallaxTarget = Math.max(-parallaxMax, Math.min(parallaxMax, raw));
    }
    scheduleParallaxStep();
  };

  if (siteBackground && constellationCanvas && !constellationCanvas.dataset.enhanced) {
        constellationCanvas.dataset.enhanced = 'true';
        const ctx = constellationCanvas.getContext('2d');

        if (ctx) {
          updateParallaxBounds();
          updateParallaxTarget();

          const pointer = { rawX: 0, rawY: 0, active: false };
          let width = 0;
          let height = 0;
          let stars: Array<{ x: number; y: number; vx: number; vy: number; radius: number }> = [];
          let animationFrame = 0;

          const randomBetween = (min: number, max: number) => Math.random() * (max - min) + min;

          const setCanvasSize = () => {
            width = window.innerWidth;
            height = window.innerHeight;

            if (width === 0 || height === 0) {
              return;
            }

            const scale = Math.min(window.devicePixelRatio || 1, 1.5);
            constellationCanvas.width = width * scale;
            constellationCanvas.height = height * scale;
            ctx.setTransform(1, 0, 0, 1, 0, 0);
            ctx.scale(scale, scale);
          };

          const seedStars = () => {
            if (width === 0 || height === 0) {
              stars = [];
              return;
            }

            const area = width * height;
            const baseCount = Math.max(60, Math.floor(area / 14000));
            const cappedCount = Math.min(160, baseCount);

            stars = Array.from({ length: cappedCount }, () => ({
              x: Math.random() * width,
              y: Math.random() * height,
              vx: randomBetween(-0.22, 0.22),
              vy: randomBetween(-0.22, 0.22),
              radius: randomBetween(0.6, 1.4)
            }));
          };

          const drawFrame = () => {
            if (width === 0 || height === 0) {
              return;
            }

            ctx.clearRect(0, 0, width, height);

            const connectionDistance = Math.max(120, Math.min(200, Math.sqrt(width * height) * 0.12));
            const pointerX = pointer.rawX;
            const pointerY = pointer.rawY - parallaxCurrent;

            stars.forEach((star) => {
              if (!prefersReducedMotion) {
                star.x += star.vx;
                star.y += star.vy;

                if (star.x <= 0 || star.x >= width) {
                  star.vx *= -1;
                }

                if (star.y <= 0 || star.y >= height) {
                  star.vy *= -1;
                }
              }

              ctx.beginPath();
              ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);
              ctx.fillStyle = 'rgba(201, 169, 107, 0.75)';
              ctx.fill();
            });

            for (let i = 0; i < stars.length; i += 1) {
              for (let j = i + 1; j < stars.length; j += 1) {
                const dx = stars[i].x - stars[j].x;
                const dy = stars[i].y - stars[j].y;
                const distance = Math.sqrt(dx * dx + dy * dy);

                if (distance < connectionDistance) {
                  const alpha = 1 - distance / connectionDistance;
                  ctx.strokeStyle = `rgba(201, 169, 107, ${0.16 * alpha})`;
                  ctx.lineWidth = Math.max(0.2, 0.7 * alpha);
                  ctx.beginPath();
                  ctx.moveTo(stars[i].x, stars[i].y);
                  ctx.lineTo(stars[j].x, stars[j].y);
                  ctx.stroke();
                }
              }
            }

            if (pointer.active) {
              stars.forEach((star) => {
                const dx = pointerX - star.x;
                const dy = pointerY - star.y;
                const distance = Math.sqrt(dx * dx + dy * dy);

                if (distance < connectionDistance) {
                  const alpha = 1 - distance / connectionDistance;
                  ctx.strokeStyle = `rgba(201, 169, 107, ${0.25 * alpha})`;
                  ctx.lineWidth = Math.max(0.25, alpha);
                  ctx.beginPath();
                  ctx.moveTo(pointerX, pointerY);
                  ctx.lineTo(star.x, star.y);
                  ctx.stroke();
                }
              });
            }
          };

          const animate = () => {
            drawFrame();
            if (!prefersReducedMotion) {
              animationFrame = window.requestAnimationFrame(animate);
            }
          };

          const handleMotionChange = (event: MediaQueryListEvent) => {
            prefersReducedMotion = event.matches;
            window.cancelAnimationFrame(animationFrame);
            if (parallaxAnimationId !== 0) {
              window.cancelAnimationFrame(parallaxAnimationId);
              parallaxAnimationId = 0;
            }
            updateParallaxTarget();
            runParallaxStep();
            if (prefersReducedMotion) {
              drawFrame();
            } else {
              animate();
            }
          };

          if (motionQuery.addEventListener) {
            motionQuery.addEventListener('change', handleMotionChange);
          } else if ((motionQuery as any).addListener) {
            (motionQuery as any).addListener(handleMotionChange);
          }

          const updatePointer = (event: PointerEvent) => {
            pointer.rawX = event.clientX;
            pointer.rawY = event.clientY;
            pointer.active = true;

            if (prefersReducedMotion) {
              drawFrame();
            }
          };

          const disablePointer = () => {
            pointer.active = false;
            if (prefersReducedMotion) {
              drawFrame();
            }
          };

          window.addEventListener('pointermove', updatePointer, { passive: true });
          window.addEventListener('pointerup', disablePointer, { passive: true });
          window.addEventListener('pointercancel', disablePointer, { passive: true });
          window.addEventListener('pointerleave', disablePointer, { passive: true });
          window.addEventListener('blur', disablePointer);

          setCanvasSize();
          seedStars();

          if (prefersReducedMotion) {
            drawFrame();
          } else {
            animate();
          }

          window.addEventListener('resize', () => {
            setCanvasSize();
            seedStars();
            updateParallaxBounds();
            updateParallaxTarget();
            if (prefersReducedMotion) {
              drawFrame();
            }
          });

          window.addEventListener('scroll', () => {
            updateParallaxTarget();
          }, { passive: true });

          const handleVisibilityChange = () => {
            if (document.hidden) {
              window.cancelAnimationFrame(animationFrame);
            } else if (!prefersReducedMotion) {
              window.cancelAnimationFrame(animationFrame);
              animate();
            }
          };

          document.addEventListener('visibilitychange', handleVisibilityChange);
        }
      }
    </script>
  </body>
</html>